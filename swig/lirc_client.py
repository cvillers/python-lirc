# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_lirc_client', [dirname(__file__)])
        except ImportError:
            import _lirc_client
            return _lirc_client
        if fp is not None:
            try:
                _mod = imp.load_module('_lirc_client', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _lirc_client = swig_import_helper()
    del swig_import_helper
else:
    import _lirc_client
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_lirc_client.LIRC_RET_SUCCESS_swigconstant(_lirc_client)
LIRC_RET_SUCCESS = _lirc_client.LIRC_RET_SUCCESS

_lirc_client.LIRC_RET_ERROR_swigconstant(_lirc_client)
LIRC_RET_ERROR = _lirc_client.LIRC_RET_ERROR

_lirc_client.none_swigconstant(_lirc_client)
none = _lirc_client.none

_lirc_client.once_swigconstant(_lirc_client)
once = _lirc_client.once

_lirc_client.quit_swigconstant(_lirc_client)
quit = _lirc_client.quit

_lirc_client.mode_swigconstant(_lirc_client)
mode = _lirc_client.mode

_lirc_client.ecno_swigconstant(_lirc_client)
ecno = _lirc_client.ecno

_lirc_client.startup_mode_swigconstant(_lirc_client)
startup_mode = _lirc_client.startup_mode

_lirc_client.toggle_reset_swigconstant(_lirc_client)
toggle_reset = _lirc_client.toggle_reset
class lirc_list(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lirc_list, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lirc_list, name)
    __repr__ = _swig_repr
    __swig_setmethods__["string"] = _lirc_client.lirc_list_string_set
    __swig_getmethods__["string"] = _lirc_client.lirc_list_string_get
    if _newclass:
        string = _swig_property(_lirc_client.lirc_list_string_get, _lirc_client.lirc_list_string_set)
    __swig_setmethods__["next"] = _lirc_client.lirc_list_next_set
    __swig_getmethods__["next"] = _lirc_client.lirc_list_next_get
    if _newclass:
        next = _swig_property(_lirc_client.lirc_list_next_get, _lirc_client.lirc_list_next_set)

    def __init__(self):
        this = _lirc_client.new_lirc_list()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _lirc_client.delete_lirc_list
    __del__ = lambda self: None
lirc_list_swigregister = _lirc_client.lirc_list_swigregister
lirc_list_swigregister(lirc_list)

class lirc_code(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lirc_code, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lirc_code, name)
    __repr__ = _swig_repr
    __swig_setmethods__["remote"] = _lirc_client.lirc_code_remote_set
    __swig_getmethods__["remote"] = _lirc_client.lirc_code_remote_get
    if _newclass:
        remote = _swig_property(_lirc_client.lirc_code_remote_get, _lirc_client.lirc_code_remote_set)
    __swig_setmethods__["button"] = _lirc_client.lirc_code_button_set
    __swig_getmethods__["button"] = _lirc_client.lirc_code_button_get
    if _newclass:
        button = _swig_property(_lirc_client.lirc_code_button_get, _lirc_client.lirc_code_button_set)
    __swig_setmethods__["next"] = _lirc_client.lirc_code_next_set
    __swig_getmethods__["next"] = _lirc_client.lirc_code_next_get
    if _newclass:
        next = _swig_property(_lirc_client.lirc_code_next_get, _lirc_client.lirc_code_next_set)

    def __init__(self):
        this = _lirc_client.new_lirc_code()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _lirc_client.delete_lirc_code
    __del__ = lambda self: None
lirc_code_swigregister = _lirc_client.lirc_code_swigregister
lirc_code_swigregister(lirc_code)

class lirc_config(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lirc_config, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lirc_config, name)
    __repr__ = _swig_repr
    __swig_setmethods__["lircrc_class"] = _lirc_client.lirc_config_lircrc_class_set
    __swig_getmethods__["lircrc_class"] = _lirc_client.lirc_config_lircrc_class_get
    if _newclass:
        lircrc_class = _swig_property(_lirc_client.lirc_config_lircrc_class_get, _lirc_client.lirc_config_lircrc_class_set)
    __swig_setmethods__["current_mode"] = _lirc_client.lirc_config_current_mode_set
    __swig_getmethods__["current_mode"] = _lirc_client.lirc_config_current_mode_get
    if _newclass:
        current_mode = _swig_property(_lirc_client.lirc_config_current_mode_get, _lirc_client.lirc_config_current_mode_set)
    __swig_setmethods__["next"] = _lirc_client.lirc_config_next_set
    __swig_getmethods__["next"] = _lirc_client.lirc_config_next_get
    if _newclass:
        next = _swig_property(_lirc_client.lirc_config_next_get, _lirc_client.lirc_config_next_set)
    __swig_setmethods__["first"] = _lirc_client.lirc_config_first_set
    __swig_getmethods__["first"] = _lirc_client.lirc_config_first_get
    if _newclass:
        first = _swig_property(_lirc_client.lirc_config_first_get, _lirc_client.lirc_config_first_set)
    __swig_setmethods__["sockfd"] = _lirc_client.lirc_config_sockfd_set
    __swig_getmethods__["sockfd"] = _lirc_client.lirc_config_sockfd_get
    if _newclass:
        sockfd = _swig_property(_lirc_client.lirc_config_sockfd_get, _lirc_client.lirc_config_sockfd_set)

    def __init__(self):
        this = _lirc_client.new_lirc_config()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _lirc_client.delete_lirc_config
    __del__ = lambda self: None
lirc_config_swigregister = _lirc_client.lirc_config_swigregister
lirc_config_swigregister(lirc_config)

class lirc_config_entry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lirc_config_entry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lirc_config_entry, name)
    __repr__ = _swig_repr
    __swig_setmethods__["prog"] = _lirc_client.lirc_config_entry_prog_set
    __swig_getmethods__["prog"] = _lirc_client.lirc_config_entry_prog_get
    if _newclass:
        prog = _swig_property(_lirc_client.lirc_config_entry_prog_get, _lirc_client.lirc_config_entry_prog_set)
    __swig_setmethods__["code"] = _lirc_client.lirc_config_entry_code_set
    __swig_getmethods__["code"] = _lirc_client.lirc_config_entry_code_get
    if _newclass:
        code = _swig_property(_lirc_client.lirc_config_entry_code_get, _lirc_client.lirc_config_entry_code_set)
    __swig_setmethods__["rep_delay"] = _lirc_client.lirc_config_entry_rep_delay_set
    __swig_getmethods__["rep_delay"] = _lirc_client.lirc_config_entry_rep_delay_get
    if _newclass:
        rep_delay = _swig_property(_lirc_client.lirc_config_entry_rep_delay_get, _lirc_client.lirc_config_entry_rep_delay_set)
    __swig_setmethods__["ign_first_events"] = _lirc_client.lirc_config_entry_ign_first_events_set
    __swig_getmethods__["ign_first_events"] = _lirc_client.lirc_config_entry_ign_first_events_get
    if _newclass:
        ign_first_events = _swig_property(_lirc_client.lirc_config_entry_ign_first_events_get, _lirc_client.lirc_config_entry_ign_first_events_set)
    __swig_setmethods__["rep"] = _lirc_client.lirc_config_entry_rep_set
    __swig_getmethods__["rep"] = _lirc_client.lirc_config_entry_rep_get
    if _newclass:
        rep = _swig_property(_lirc_client.lirc_config_entry_rep_get, _lirc_client.lirc_config_entry_rep_set)
    __swig_setmethods__["config"] = _lirc_client.lirc_config_entry_config_set
    __swig_getmethods__["config"] = _lirc_client.lirc_config_entry_config_get
    if _newclass:
        config = _swig_property(_lirc_client.lirc_config_entry_config_get, _lirc_client.lirc_config_entry_config_set)
    __swig_setmethods__["change_mode"] = _lirc_client.lirc_config_entry_change_mode_set
    __swig_getmethods__["change_mode"] = _lirc_client.lirc_config_entry_change_mode_get
    if _newclass:
        change_mode = _swig_property(_lirc_client.lirc_config_entry_change_mode_get, _lirc_client.lirc_config_entry_change_mode_set)
    __swig_setmethods__["flags"] = _lirc_client.lirc_config_entry_flags_set
    __swig_getmethods__["flags"] = _lirc_client.lirc_config_entry_flags_get
    if _newclass:
        flags = _swig_property(_lirc_client.lirc_config_entry_flags_get, _lirc_client.lirc_config_entry_flags_set)
    __swig_setmethods__["mode"] = _lirc_client.lirc_config_entry_mode_set
    __swig_getmethods__["mode"] = _lirc_client.lirc_config_entry_mode_get
    if _newclass:
        mode = _swig_property(_lirc_client.lirc_config_entry_mode_get, _lirc_client.lirc_config_entry_mode_set)
    __swig_setmethods__["next_config"] = _lirc_client.lirc_config_entry_next_config_set
    __swig_getmethods__["next_config"] = _lirc_client.lirc_config_entry_next_config_get
    if _newclass:
        next_config = _swig_property(_lirc_client.lirc_config_entry_next_config_get, _lirc_client.lirc_config_entry_next_config_set)
    __swig_setmethods__["next_code"] = _lirc_client.lirc_config_entry_next_code_set
    __swig_getmethods__["next_code"] = _lirc_client.lirc_config_entry_next_code_get
    if _newclass:
        next_code = _swig_property(_lirc_client.lirc_config_entry_next_code_get, _lirc_client.lirc_config_entry_next_code_set)
    __swig_setmethods__["next"] = _lirc_client.lirc_config_entry_next_set
    __swig_getmethods__["next"] = _lirc_client.lirc_config_entry_next_get
    if _newclass:
        next = _swig_property(_lirc_client.lirc_config_entry_next_get, _lirc_client.lirc_config_entry_next_set)

    def __init__(self):
        this = _lirc_client.new_lirc_config_entry()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _lirc_client.delete_lirc_config_entry
    __del__ = lambda self: None
lirc_config_entry_swigregister = _lirc_client.lirc_config_entry_swigregister
lirc_config_entry_swigregister(lirc_config_entry)

class lirc_cmd_ctx(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lirc_cmd_ctx, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lirc_cmd_ctx, name)
    __repr__ = _swig_repr
    __swig_setmethods__["packet"] = _lirc_client.lirc_cmd_ctx_packet_set
    __swig_getmethods__["packet"] = _lirc_client.lirc_cmd_ctx_packet_get
    if _newclass:
        packet = _swig_property(_lirc_client.lirc_cmd_ctx_packet_get, _lirc_client.lirc_cmd_ctx_packet_set)
    __swig_setmethods__["buffer"] = _lirc_client.lirc_cmd_ctx_buffer_set
    __swig_getmethods__["buffer"] = _lirc_client.lirc_cmd_ctx_buffer_get
    if _newclass:
        buffer = _swig_property(_lirc_client.lirc_cmd_ctx_buffer_get, _lirc_client.lirc_cmd_ctx_buffer_set)
    __swig_setmethods__["reply"] = _lirc_client.lirc_cmd_ctx_reply_set
    __swig_getmethods__["reply"] = _lirc_client.lirc_cmd_ctx_reply_get
    if _newclass:
        reply = _swig_property(_lirc_client.lirc_cmd_ctx_reply_get, _lirc_client.lirc_cmd_ctx_reply_set)
    __swig_setmethods__["head"] = _lirc_client.lirc_cmd_ctx_head_set
    __swig_getmethods__["head"] = _lirc_client.lirc_cmd_ctx_head_get
    if _newclass:
        head = _swig_property(_lirc_client.lirc_cmd_ctx_head_get, _lirc_client.lirc_cmd_ctx_head_set)
    __swig_setmethods__["reply_to_stdout"] = _lirc_client.lirc_cmd_ctx_reply_to_stdout_set
    __swig_getmethods__["reply_to_stdout"] = _lirc_client.lirc_cmd_ctx_reply_to_stdout_get
    if _newclass:
        reply_to_stdout = _swig_property(_lirc_client.lirc_cmd_ctx_reply_to_stdout_get, _lirc_client.lirc_cmd_ctx_reply_to_stdout_set)
    __swig_setmethods__["next"] = _lirc_client.lirc_cmd_ctx_next_set
    __swig_getmethods__["next"] = _lirc_client.lirc_cmd_ctx_next_get
    if _newclass:
        next = _swig_property(_lirc_client.lirc_cmd_ctx_next_get, _lirc_client.lirc_cmd_ctx_next_set)

    def __init__(self):
        this = _lirc_client.new_lirc_cmd_ctx()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _lirc_client.delete_lirc_cmd_ctx
    __del__ = lambda self: None
lirc_cmd_ctx_swigregister = _lirc_client.lirc_cmd_ctx_swigregister
lirc_cmd_ctx_swigregister(lirc_cmd_ctx)


def lirc_init(prog, verbose):
    return _lirc_client.lirc_init(prog, verbose)
lirc_init = _lirc_client.lirc_init

def lirc_deinit():
    return _lirc_client.lirc_deinit()
lirc_deinit = _lirc_client.lirc_deinit

def lirc_nextir():
    return _lirc_client.lirc_nextir()
lirc_nextir = _lirc_client.lirc_nextir

def lirc_ir2char(config, code):
    return _lirc_client.lirc_ir2char(config, code)
lirc_ir2char = _lirc_client.lirc_ir2char

def lirc_nextcode(code):
    return _lirc_client.lirc_nextcode(code)
lirc_nextcode = _lirc_client.lirc_nextcode

def lirc_code2char(config, code, string):
    return _lirc_client.lirc_code2char(config, code, string)
lirc_code2char = _lirc_client.lirc_code2char

def lirc_code2charprog(config, code, string, prog):
    return _lirc_client.lirc_code2charprog(config, code, string, prog)
lirc_code2charprog = _lirc_client.lirc_code2charprog

def lirc_getsocketname(id, buf, size):
    return _lirc_client.lirc_getsocketname(id, buf, size)
lirc_getsocketname = _lirc_client.lirc_getsocketname

def lirc_getmode(config):
    return _lirc_client.lirc_getmode(config)
lirc_getmode = _lirc_client.lirc_getmode

def lirc_setmode(config, mode):
    return _lirc_client.lirc_setmode(config, mode)
lirc_setmode = _lirc_client.lirc_setmode

def lirc_command_init(ctx, fmt):
    return _lirc_client.lirc_command_init(ctx, fmt)
lirc_command_init = _lirc_client.lirc_command_init

def lirc_command_run(ctx, fd):
    return _lirc_client.lirc_command_run(ctx, fd)
lirc_command_run = _lirc_client.lirc_command_run

def lirc_command_reply_to_stdout(ctx):
    return _lirc_client.lirc_command_reply_to_stdout(ctx)
lirc_command_reply_to_stdout = _lirc_client.lirc_command_reply_to_stdout

def lirc_send_one(fd, remote, keysym):
    return _lirc_client.lirc_send_one(fd, remote, keysym)
lirc_send_one = _lirc_client.lirc_send_one

def lirc_simulate(fd, remote, keysym, scancode, repeat):
    return _lirc_client.lirc_simulate(fd, remote, keysym, scancode, repeat)
lirc_simulate = _lirc_client.lirc_simulate

def lirc_get_remote_socket(address, port, quiet):
    return _lirc_client.lirc_get_remote_socket(address, port, quiet)
lirc_get_remote_socket = _lirc_client.lirc_get_remote_socket

def lirc_get_local_socket(path, quiet):
    return _lirc_client.lirc_get_local_socket(path, quiet)
lirc_get_local_socket = _lirc_client.lirc_get_local_socket
# This file is compatible with both classic and new-style classes.


